# Flutter

# 1 플러터 시작하기

## 01-1 플러터의 등장 배경

- Apple : iOS 운영체제 발표 → Objective-C로 만든 앱 스토어
- Google : 안드로이드 운영체제 발표 → Java로 만든 구글 플레이 (2008-2012 : 안드로이드 마켓)

개발 생태계 확장 목적으로 새로운 언어 출시

- Apple : Swift
- Google : Kotlin

>> 각 모바일 운영체제에 맞는 언어로 개발한 앱 : 네이티브 앱(native apps)

### 웹앱, 하이브리드 앱의 등장

> “하나의 소스로 안드로이드와 iOS 모두에서 실행할 수 있는 방법이 없을까?”
>

>> 웹앱, 하이브리드 앱의 등장

- 웹앱(web apps) : 웹 기술을 이용해서 만든 앱

    앱의 화면을 나타내는 뷰(view)를 모바일용 웹으로 만들어서 다기종, 해상도에 대응 가능

    - 프로그레시브 웹앱(progressive web apps, PWA) : 네이티브 앱처럼 알림 전송, 오프라인에서도 동작
    - 하이브리드 앱(hybride apps) : 웹앱을 만든 후 별도 프레임워크로 운영체제별 앱을 만드는 기술

### 리액트 네이티브와 플러터

- Facebook : 리액트 네이티브(React native)
    - 여러 운영체제에서 동작하는 앱 개발이 가능한 크로스 플랫폼 앱 개발 프레임워크
    - 웹 개발자에게 익숙한 Java Script를 사용하여 웹 개발자는 새로운 언어를 배우지 않아도 된다는 장점
    - 네이티브 언어로 앱 개발 시 사용자 인터페이스(user interface ,UI) 변경 시마다 다시 빌드 필요

        BUT 리액트 네이티브는 코드를 변경하면 화면에 바로 표시함으로써 높은 개발 효율


> 리액트 네이티브 → Java Script(다리 역할) → 안드로이드나 iOS의 네이티브 API 접근
>
- 웹앱이나 하이브리드 앱보다는 속도가 빠르지만, 화면에 표시할 내용량에 따라 느려지는 단점
- 운영체제 업데이트에 의해 디자인이 의도한 바와 달라질 수 있다는 단점
- 스크립트에 익숙치 않은 안드로이드나 iOS 개발자가 배우는 데에 오랜 시간이 걸린다는 단점

- 플러터(Flutter) : 크로스 플랫폼 앱 개발 프레임워크, 다트(Dart) 언어 사용
    - 자바나 C# 같은 컴파일 언어가 가진 특징을 활용해 앱 개발 가능

- 플러터의 계층
1. 프레임워크 : 다트 언어로 개발된 여러 가지 클래스(이를 이용해 앱 개발)
2. 엔진 : 플러터의 코어를 담당, 대부분 C와 C++로 구성

    데이터 통신, 다트 컴파일, 렌더링, 시스템 이벤트 등을 처리하는 부분

3. 임베더 : 플러터 앱이 크로스 플랫폼에서 동작하도록 플러터 엔진이 렌더링한 결과를

    플랫폼별 네이티브 언어로 뷰를 만들어 화면에 표시

    - 안드로이드 앱 : Java, C, C++
    - iOS 앱 : Objective-C, Objective-C++
    - Linux, Window 앱 : C++

>> 다트 언어로 소스 파일만 작성하면 플러터의 각 계층을 거쳐 플랫폼별 앱 개발 가능

(가운데 내부적인 처리는 신경쓰지 않고서 플러터나 다트 언어를 업데이트만 하면 가능)

리액트 네이티브와 플러터 비교

| 구분 | 리액트 네이티브 | 플러터 |
| --- | --- | --- |
| 개발 주체 | 페이스북 | 구글 |
| 언어 | 자바스크립트 | 다트 |
| 출시 | 2015년도 | 2017년도 |
| 성능 | 빠르지만 네이티브 앱만큼은 아님 | 네이티브 앱에 근접한 속도 |
| 학습 곡선 | 높음(네이티브 앱 개발자 기준) | 낮음(네이티브 앱 개발자 기준) |
| 대표 앱 | 페이스북, 인스타그램, 핀터레스트 등 | 알리바바, 구글 애드센스, 리플렉틀리 등 |
| 장점 | - 저변이 넓은 자바스크립트 생태계        - 웹 개발자의 접근성                            - npm으로 많은 패키지 이용 가능 | - 다양한 위젯                                             - 강력한 애니메이션 기능                            - 블루투스 등 네이티브 하드웨어와의 연결성 |
| 단점 | - 기본 위젯이 부족해 커스텀해 사용       - 안드로이드/iOS 네이티브 위젯을 이용하기에 OS 판올림에 따른 업데이트 필요 - 블루투스 등 네이티브 커스텀해 통신하는 부분 개발이 어려움 | - 플러터 SDK로 앱 크기가 큼(네이티브 대비)                                                          - 아직 개발 생태계가 성숙하지 않아 빠른    피드백 얻기가 어려움                                     - 업데이트 주기가 빠름(분기별) |
| 최종목표 | 자바스크립트로 웹, 앱, 데스크톱, 모든 플랫폼을 개발할 수 있는 통합 솔루션 개발 | 안드로이드, iOS, 웹, 윈도우 10 앱을 같은 코드로 개발할 수 있는 플랫폼 개발 |

## 01-2 플러터가 주목받는 이유

### 플러터를 상징하는 대표적인 특징 3가지

- 하나, 높은 개발 효율
    - 안드로이드와 iOS 앱을 동시에 개발할 수 있어서 효율적
    - 어떤 운영체제에서도 똑같은 사용자 인터페이스와 사용자 경험(UX, user experience)을 제공
    - 핫 리로드(hot reload) 기능 : 소스 수정 후 번거로운 빌드 과정 없이 결과 화면에 바로 표시

- 둘, 유연한 사용자 인터페이스
    - 다양한 위젯(widget)을 제공하므로 사용자 맞춤형 앱 쉽게 제작 가능
    - 강력한 애니메이션 기능을 제공하여 복잡한 계산식 없이 적은 노력으로 만족스러운 사용자 경험 선사
    - 위젯을 활용하여 iOS에서 구글의 머터리얼 디자인이 적용된 앱을 만들거나,

        안드로이드에서 iOS 스타일 앱을 개발 가능

        - 플러터에서는 iOS 스타일의 위젯을 쿠퍼티노(cupertino)라 부름
- 셋, 빠른 속도
    - 플러터는 전체 화면을 그릴 때 스키아(skia) 엔진 이용

        >> 빠르고 자연스러운 화면 전환읋 네이티브 앱과 속도 차이를 거의 느낄 수 없음

- 플러터의 야망, 웹을 품다
    - 플러터의 최종 목표는 플러터를 이용해 웹과 데스크톱 앱까지 만드는 것