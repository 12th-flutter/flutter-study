dart 시작하기 week_02 백인서

main 함수에서 우리가 쓰는 함수가 호출 된다
실제 동작 코드는 main 내에 넣어야 함 

print("~");  >> 세미클론 자동 추가 안됨(다트 내에 추가 기능이 있기 때문)

변수 
-----------------------------------------------------------------------------------------------------------------------------------
- 변수 만드는 법 
1. 함수나 메소드 내부에 지역변수를 선언할 때 var (타입이 같다면 업데이트 가능함) >> 권장 방식
2. class에서 변수나 property를 선언할 때는 타입을 지정

dynamic 타입
-만약 변수를 선언할 때 아무런 값을 지정하지 않거나, 타입을 선언하지 않으면 자동적으로 dynamic 타입을 가짐
-대표적으로 타입을 알기가 힘들 때 사용하지만 정말 필요 할때만 사용해야 함

Null Safety: null 도 사용 가능해!
- null은 우리가 필요로 하는데 보통 사용 시 런타임 애러가 뜸
- String뒤에 ?를 붙여줌으로서 name이 String 또는 null이 될 수 있다고 명시함
- 기본적으로 모든 변수는 non-nullable(null이 될 수 없음)

final 변수
- 수정할 수 없는 변수

late 변수
- final이나 var, 타입 앞에 붙여 사용
- 초기 데이터 없이 먼저 변수를 생성 후 데이터를 넣을때 사용하는 변수
- flutter로 data fecthing을 할 때 유용하다.
- late 변수를 만들고, API에 요청을 보낸 뒤에 API에서 값을 보내주면 그 응답값을 late변수에 넣어 사용할 수 있다.

const 변수
- compile-time constant(상수, 수정 불가)를 만들어주는 변수
- const는 컴파일할 때 알고 있는 값을 사용해야 한다.
- 앱 개시 전 필요한 상수 >> const
- 앱 개시 이후 사용자에 입력받은 후 필요한 상수 >> final
-----------------------------------------------------------------------------------------------------------------------------------

자료형
-----------------------------------------------------------------------------------------------------------------------------------
- String, bool, int, double
- dart에서 자료형은 모두 객체
(String, int, double, bool 모두 class 따라서 import할 필요 없이 해당 자료형이 가지는 모든 method를 사용할 수 있음 그 중, int와 double 은 num이라는 자료형을 상속받은 자료형, num은 그 값이 integer 일 수도 있고 double 일 수도 있음)

List
- 2가지 방법 존재
ex) 
List<int> numbers = [1, 2, 3];
var number2 = [4, 5, 6];
- collection if: List를 만들 때, if를 통해 존재할 수도 안 할 수도 있는 요소를 가지고 만들 수 있다.
ex)
[1, 2, 3, if(조건문) 5]
- 리스트를 , 로 마무리하면 보다 보기 쉽게 볼 수 있음

String Interpolation
- $뒤에 변수명 >> 변수값 활용가능(변수 값에 계산을 넣고 싶을때 ${변수명 +계산} 도 가능)
- '', "" 상관 없음 

Collection For
- 컬랙션을 만들때 for 사용 가능 
ex)
[민수, 상길, 준혁, for(변수 타입 변수명 in 변수명)'$friend']

Maps
-  key와 value를 연결하는 객체
ex)
var gifts = {
// Key: Value
'first': 'partridge',
'second': 'turtledoves',
'fifth': 'golden rings'
};

Sets
- Set에 속한 모든 아이템들이 유니크해야될 때 사용
유니크할 필요가 없다면 List를 사용하면 된다.
- 요소가 항상 하나씩만 있어야 할때
ex)
var 변수명 = {1, 2, 3, 4};
-----------------------------------------------------------------------------------------------------------------------------------

Functions
-----------------------------------------------------------------------------------------------------------------------------------
- 함수는 객체로 타입이 Function입니다. 이는 함수를 변수에 할당하거나 다른 함수에 인수로 전달할 수 있음을 의미합니다.

Named parameters
- Named parameters는 명시적으로 required로 표시되지 않는 한 선택 사항입니다. 기본값을 제공하지 않거나 Named parameters를 필수로 표시하지 않으면 해당 유형은 기본값이 null이 되므로 null을 허용해야 합니다.

1. Positional parameters
: 함수에 정의되어있는 파라미터 순서대로 들어감.
2. named Parameters
: 함수에 정의되어 있는 파라미터 순서를 지키지 않아도 됨.

 named Parameters의 null 방지
1. 디폴트값을 지정
2. Required modifier 쓰기

- Dart에서 [] 은 optional, positional parameter를 명시할 때 사용된다.
name, age는 필수값이고 []를 통해 country를 optional값으로 지정해줄 수 있다.

- ?? 연산자를 이용하면 왼쪽 값이 null인지 체크해서 null이 아니면 왼쪽 값을 리턴하고 null이면 오른쪽 값을 리턴한다.
ex)
String capitalizeName(String? name) {
return name?.toUpperCase() ?? "";
}

TypeDef
- 자료형에 사용자가 원하는 alias를 붙일 수 있게 해준다. (자료형 이름의 별명을 만들 때 사용)

-----------------------------------------------------------------------------------------------------------------------------------

class
-----------------------------------------------------------------------------------------------------------------------------------
- dart에서 property를 선언할 때는 타입을 사용해서 정의한다.
- class method안에서는 this를 쓰지 않는 것을 권장한다.
- new 를 꼭 붙이지 않아도 됨
- dart에서 생성자(constructor) 함수는 클래스 이름과 같아야 한다.
- enum은 우리가 실수하지 않도록 도와주는 타입이다.
- 추상 클래스는 다른 클래스들이 직접 구현해야 하는 필드와 메소드들을 모아놓은 클래스
추상 클래스는 아직 메소드와 내용이 추상적이므로 객체를 생성할 수 없다.
추상 클래스를 상속받는 클래스들은 추상 클래스의 메소드들을 구현해야 한다.
- 상속을 하고 super를 이용해 부모 클래스의 생성자를 호출할 수 있다.
- @override를 이용해 부모 클래스의 객체를 받아올 수 있다.

Mixin
- 생성자가 없는 클래스를 의미한다.
- 상속을 할 때 extends를 하지 않고 with 를 사용한다.
- 여러 클래스에 재사용이 가능